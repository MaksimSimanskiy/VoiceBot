#!/usr/bin/env python3
# -*- coding: cp1251 -*-
import urllib.request
import json
import sys
import os
import psycopg2
from datetime import datetime
import requests

url_amo = 'https://yandexform.ru/amo/recognize/note_rec.php'


file=sys.argv[1]
lid = sys.argv[2]


FOLDER_ID = "default"
API = ""
params = "&".join([
	"topic=general",
	"format=lpcm",
	"sampleRateHertz=8000",
	"lang=ru-RU"
])
try:
	with open(file, "rb") as f:
		data = f.read()
	url = urllib.request.Request("https://stt.api.cloud.yandex.net/speech/v1/stt:recognize?%s" % params, data=data)
	url.add_header("Authorization", "Api-Key %s" % API)
	responseData = urllib.request.urlopen(url).read().decode('UTF-8')
	decodedData = json.loads(responseData)
	os.remove(file)
except FileNotFoundError:
	print("none",end="")
	sys.exit()

conn = psycopg2.connect(
    dbname="maksimsima",
    user="maksimsima",
    password="Maks1999",
    host="pg3.sweb.ru",
    port="5432"
)

cur = conn.cursor()

# Переменная lid
lid = str(lid)

# Выполнение запроса
cur.execute("SELECT data FROM telephone WHERE lid = %s", (lid,))
rows = cur.fetchall()
respVac = ""
# Вывод результатов
for row in rows:
    respVac = row[0]

cur.close()
conn.close()

def write_to_json(id, text, rec):
    text = text + ' ' + rec
    data = {
        "сделка": id,
        "речь": text,
        "время": str(datetime.now())
    }

    try:
        with open("/tmp/backup.json", "r") as file:
            file_data = json.load(file)
    except (FileNotFoundError, json.decoder.JSONDecodeError):
        file_data = []

    found = False
    for item in file_data:
        if item["сделка"] == id:
            if isinstance(item["речь"], str):
                item["речь"] = [item["речь"]]  # Преобразуем строку в список
            item["речь"].append(text)
            found = True

    if not found:
        file_data.insert(0, data)

    with open("/tmp/backup.json", "w") as file:
        json.dump(file_data, file, indent=4, ensure_ascii=False)

def count_matches(sentence, lists,respVac):
	matches = {}

	for list_name, word_list in lists.items():
            matches[list_name] = sum(sentence.lower().count(word.lower()) if idx <= len(sentence.split()) // 1 else 2 * sentence.lower().count(word.lower()) for idx, word in enumerate(word_list))

	max_matches = max(matches.values())
	
	max_list = max(matches, key=matches.get)
	if sentence == "":
		return("void")

	elif max_matches == 0:
		return("none")

	if max_list == "detail" and respVac.lower().find('груз') != -1:
		return("gruz")
	elif max_list == "detail" and respVac.lower().find('ед') != -1:
		return("eda")
	elif max_list == "detail" and respVac.lower().find('такси') != -1:
		return("taxi")
	elif max_list == "detail" and respVac.lower().find('авто') != -1:
		return("avto")

	if max_list == "vacancy" and respVac.lower().find('груз') != -1:
		return("gruzv")
	elif max_list == "vacancy" and respVac.lower().find('ед') != -1:
		return("edav")
	elif max_list == "vacancy" and respVac.lower().find('такси') != -1:
		return("taxi")
	elif max_list == "vacancy" and respVac.lower().find('авто') != -1:
		return("avtov")

	if max_matches != 0:
		return(max_list)

if decodedData.get("error_code") is None:
	resp=decodedData.get("result")
	files = {
    		'number': (None, lid),
    		'text': (None, resp)
	}
	response = requests.post(url_amo, files=files)
else:
	print("none")
lists = {
    
    "autocall": ['здравствуйте чем могу помочь','передаcт','передам','олег','секретар','сожалению','вызываемый','недоступен','принять','звонок','сообщение' , 'после','сигнал', 'перенаправлен','автоответчик','звукового','абонент','не отвечает','не может сейчас' ,'ответить','звонок','почтовый','оставить','персональ'],

    "podrabotka": ["это подработка"," в свободное время","пока нет свободного времени","нет времени"],
    "fixcar": ["машина сломалась", "слома", "газель сломалась", "авари","почин"],
    "pogoda": ["погода", "холодно", "плохая погода", "потеплеет", "пока холодно"],
    "sick": ["болею", "заболел", "выздоровею", "нездоровится", "здоров","болел","болезнь","болен"],
    "cheap": ["бонус","невыгодно","заказы дешевые"],
    "malo": ["заказы долго", "стою без", 'нет заказов','мало заказов',"жду заказы","долго","нет заказов"],

    "park": ['что за партнер', 'партнер','парк','какой парк','автопарк','таксопарк'],
    "vacancy": ['по какому вопросу','ваканси', 'объявлени','что за ваканси','какая вакансия','что за объявление','какому вопросу'],
    "company": ['кто это','компани', 'фирм', 'организац','парк', 'контор','богат','какая компания','что за компания','что за контора'],
    "late": ['ближайший месяц','потом','не сейчас','смогу','недел','месяц','в конце','пока нет','позже','чуть позже выйду',"следующей неделе","на выходных","планирую выйти","на днях",'пока я не смогу выйти'],
    "cash": ['карту','карта','карточку','банк','оформля','карт','наличк'],
    "taxes": ['какая комиссия парка','тариф','коммисия', 'какая у вас', 'у вашего парка','процент','полтора','какая ставка','процент идет','вы оставляете себе'],
    "wallet": ['ежедневные', 'выплаты'],
    "app": ['что за приложение', 'приложен','какое приложение'],
    "city": ['район','посёл', 'посел', 'город','около','рядом','област','нахожус','живу','прописка','живу в городе','прожив','поблизости'],
    "salary": ['сумму','за час', 'в час', 'смен','за смену','сколько','плат','заработ','зарплат','доход','оплат','по оплате','минимальн'],
    "gsm": ['соляр','гсм', 'оплачива', 'компенсиру','компенсац','расход','бензин','топливо','гс'],
    "transport": ['нету машина своя','на вашем авто','предоставля', 'транспорт', 'машин','даёт','дает','аренд','машины нет','парковом','на своем авто','со своим грузовым'],
    "time": ['постоянная','график','свободный','выходн', 'будн', 'вечер','иногда','после работы','по выходным','по будням','заканчиваю','час','основная работа','подработка'],
    "tomorrow": ['перезвоните', 'завтра','некогда','поздн','как бы время','ночь','занят','подключе','уже подключе'],
    "office": ['где ваш офис','здесь нет','как вас найти','офис', 'куда','подъехать','можно в офис подъехать','улиц','приехат','приеду','где находится','контора'],
    "hour": ['не могу разговаривать', 'через','не хочу разговаривать','уже зарегистрирован','перезвонит', 'через','минут','потом','неудобно','неудобно говорить','разговарить','говорить сейчас','полчаса','говорит','за рулем','за рулём'],
    "autoyear": ['год выпуска машины','год выпуска','года','подходит','у меня машина', 'года выпуска','могу работать','какого года','машина может работать','от какого года','стар','200','19'],
    "num": ['учет','машина с', 'машина на','не российск','номера','номерах','иностр','казах','смогу работать','армянс','номерах','белорусских','пойдет','подойдет','могу работать','можно работать'],
    "uzbek": ['водительские права','белорус','гражданст', 'узбек','таджик','армян','киргиз','казах','если у меня','паспорт','права','гражданин','армени'],
    "small": ['я уже работаю',' не пропуск'],
    "work": ['что вы предлагаете','что за работа', 'какая работа', 'работа','работат','заказ где','предлагает'],
    "yandex": ['вы кому звоните','яндекс', 'это яндекс','яндекс работа'],

    "detail": ['такси ','доставка','что у вас там','объяснит','доставка чего','водитель','уточнить','что это вообще','возить','формат','условия','расскажите', 'подробнее', 'поподробнее', 'что делать','узнат','заключается','суть','какая','состоит','надо'],
    "official": ['официальн', 'трудоустро','не официально','работа офи','оформлен','официальное трудоустройство'],
    "order": ['сколько', 'заказ','заяв','сколько заказов в день','в день','в сутки','выполнят','объем'],
    "eda": ['еда', 'еду', 'еды','яндекс еда','пеший','курьер'],
    "taxi": ['такси', 'таксовать', 'водител','таксо','таксист'],
    "avto": ['автокурьер', 'автомобиль', 'автомобиле','машин','легково','каблук','газель'],
    "gruz": ['грузов', 'груз', 'грузовом авто', 'перевозка', 'грузи','грузовике'],
    "yes_q": ['ага','да', 'есть','остались'],
    "allo": ['ало', 'алло','слышите меня','плохо слышно','повторите'],
    "yes": ['приступить к работе','посмотрел','посмотрим','отправ','все хорошо','уже говорил','уже общаюсь', 'актуальн','можно','конечно','да актуальна','да актуально','да актуальная','попробовать','регистриро'],
    "no_q": ['скиньте ссылку','отправьте','хорошо','все ясно','да ой нет','изучу','ясно','понятно','нет', 'нет вопросов', 'неа','осталось','нэт','никаких','вопрос','не знаю','спасибо','почитаю','ознакомлюсь'],
    "no": ['отбой','не туда попали','передумал','я не откликался','ошибся','нечаянно','не интерес','не актуальн','никак','нэт','да ну нет','нет конечно','не актуальна','уже не актуально','нет не актуальн','случайно','нажал','извините','не устраивает'],
    "age": ['пенсионер', 'берете','берёте','на работу','я пенсионер','человек в возрасте','13 лет','16 лет','14 лет','15 лет','17 лет','со скольки лет'] 

}
words = resp.split()  # Разбиваем строку на слова
unique_words = []
for word in words:
    if word not in unique_words:
        unique_words.append(word)

resp = ' '.join(unique_words)  # Объединяем слова обратно в строку
result = count_matches(resp, lists,respVac)
write_to_json(lid, resp,result)
print(result,end="")
